{

		'butterfly-curve' : {
			toString : "e" + "sin(θ)".sup() + "-2cos(4θ)" + "sin" + "5".sup() + "(2θ - PI / 24)",
			link : 'https://en.wikipedia.org/wiki/Butterfly_curve_(transcendental)',
			polar : function() {
						return d3.range(0, Eq[5] * Math.PI, .01).map(function(t) {
							var r = Math.exp(Math.sin(t))-Eq[0]*Math.cos(Eq[1]*t)+Math.pow(Math.sin((Eq[2]*t-Math.PI)/Eq[3]),Eq[4]);
	  						return [t, r*3];
						});
					},
			states : {
				'default' : 			[2, 4, 2, 24, 5, 20],
				'one' : 				[1, 2, 6, 5, 10, 13],
				'two' : 				[2, 4, 2, 24, 5, 20],
				'three' : 				[2, -4, -6, -7, 1, 17],
				'circle-enemy' : 		[2, 4, 1, 9, 3, 20],
				'five' : 				[0, 4, 7, 5, 6, 18],
				'six' : 				[0, 6, 9, 5, 6, 18],
				'seven' : 				[-1, 0, 9, 24, 1, 17],
				'eight' : 				[0, 4, 0, 24, 5, 20] 				// vary 3rd
			}
		},

		'cannabis-curve' : {
			toString : "",
			link : 'http://mathworld.wolfram.com/CannabisCurve.html',
			polar : function() {
						return d3.range(0, Eq[5] * Math.PI, .01).map(function(t) {
							var pt1 = 1 + (9/10)*Math.cos(8*t);
							var pt2 = 1 + (1/10)*Math.cos(24*t);
							var pt3 = (9/10) + (1/10)*Math.cos(200*t);
							var pt4 = 1 + Math.sin(t);
							var r = pt1*pt2*pt3*pt4;
	  						return [t, r*3];
						});
			},
			states : {
				'default' : [1,1,1,1,1,1]
			}
		},


		'golden-spiral' : {
			toString : "ae"+"bθ".sup(),
			link : 'https://en.wikipedia.org/wiki/Golden_spiral',
			polar : function() {
						return d3.range(0, Eq[5] * Math.PI, .01).map(function(t) {
							var r = Math.pow(1.358456,t);
	  						return [t, r];
						});
			},
			states : {
				'default' : [1,1,1,1,1,1]
			}
		},


		'lissajous-curve' : {
			toString : "",
			link : 'https://en.wikipedia.org/wiki/Lissajous_curve',
			polar : function() {
						return d3.range(0, 2 * Math.PI, .01).map(function(t) {
							var w = (Eq[4]-1)/Eq[4] * Math.PI/2;
							var x = Eq[0]*Math.sin(Eq[2]*t+w);
							var y = Eq[1]*Math.sin(Eq[3]*t);
							return [x*30,y*30];
						});

			},
			states : {
				'default' : [1, 1, 1, 3, ]
			}
		},

		'heart-curve' : {
			toString : "",
			link : 'http://mathworld.wolfram.com/HeartCurve.html',
			polar : function() {
						return d3.range(0, Eq[5] * Math.PI, .01).map(function(t) {
							var r = ( ( Math.sin(t) * Math.sqrt(Math.abs(Math.cos(t))) ) / ( Math.sin(t) + (7/5) ) ) - (2 * Math.sin(t)) + 2 ;
	  						return [t, r*2];
						});
			},
			states : {
				'default' : [1,1,1,1,1,2]
			}
		},

		'archimedean-spiral' : {
			toString : "",
			link : 'https://en.wikipedia.org/wiki/Archimedean_spiral',
			polar : function() {
						return d3.range(0, Eq[5] * Math.PI, .01).map(function(t) {
							var r = Eq[0] + Eq[1]*t
	  						return [t, r];
						});
			},
			states : {
				'default' : [1,1,1,1,1,2]
			}
		},

		'fermat-spiral' : {
			toString : "",
			link : 'https://en.wikipedia.org/wiki/Fermat%27s_spiral',
			polar : function() {
						return d3.range(0, Eq[5] * Math.PI, .01).map(function(t) {
							var r = Math.pow(Math.abs(t),.5);
	  						return [t, r];
						});
			},
			states : {
				'default' : []
			}
		},

		'idk' : {
			toString : "",
			link : 'http://www.wolframalpha.com/input/?i=ParametricPlot%5B%7BCos%5Bt%5D+Sinc%5Bt%5D%2C+Sin%5Bt%5D+Sinc%5Bt%5D%7D%2C+%7Bt%2C+0%2C+8+Pi%7D%5D',
			polar : function() {
						return d3.range(.1, 80 * Math.PI, .1).map(function(t) {
							var y = Math.cos(t)*(Math.sin(t)/t);
							var x = Math.sin(t)*(Math.sin(t)/t);
	  						return [x*300, y*300];
						});

			},
			states : {
				'default' : [0,0,0,0,0,0]
			}
		},
		'cardioid-braid' : {
			toString : "",
			link : 'http://www.wolframalpha.com/input/?i=ParametricPlot%5B%7BCos%5Bt%5D+Sinc%5Bt%5D%2C+Sin%5Bt%5D+Sinc%5Bt%5D%7D%2C+%7Bt%2C+0%2C+8+Pi%7D%5D',
			polar : function() {
						return d3.range(.1, Eq[5] * Math.PI, .1).map(function(t) {
							var r = Eq[0] + Eq[2]*Math.sin((Eq[1]*Math.PI*t)/Eq[3]);
	  						return [t, r];
						});

			},
			states : {
				'default' : [10,2,1,1,0,80],
				'wutt' : [9, -2, 1, 1, 5, 80],
			}
		},
		
		'superformula' : {
			toString : "",
			link : 'https://en.wikipedia.org/wiki/Superformula',
			polar : function() {
						return d3.range(.1, 10 * Math.PI, .1).map(function(t) {
							var a=Eq[0],
								b=Eq[1],
								m=Eq[2],
								n1=Eq[3],
								n2=Eq[4],
								n3=Eq[5];

							var pt1 = Math.pow(Math.abs(Math.cos(m*t/4)/a), n2);
							var pt2 = Math.pow(Math.abs(Math.sin(m*t/4)/b), n3);
							var r = Math.pow(pt1+pt2, -(1/n1));
	  						return [t, r*3];
						});

			},
			states : {
				'default' : [1,1,1,1,1,1]
			}
		},


		'wuttt' : {
			toString : "",
			link : '',
			polar : function() {
						return d3.range(.1, Eq[5] * Math.PI, .1).map(function(t) {

							var r = t + Eq[0]*Math.sin(Eq[1]*Math.PI*t) + Eq[2]*Math.cos(Eq[3]*Math.PI*t)
	  						return [t, r/3];
						});

			},
			states : {
				'default' : [2,2,4,2,1,12],
				'tripple' : [10, 1, 2, -10, -10, 12],
			}
		},

		'wut' : {
			toString : "",
			link : '',
			polar : function() {
						return d3.range(.1, 12 * Math.PI, .1).map(function(t) {

							var r = t * Math.sin(t);
	  						return [t, r/3];
						});

			},
			states : {
				'default' : [1,1,1,1,1,1]
			}
		},

		'spiral' : {
			toString : "",
			link : '',
			polar : function() {
						return d3.range(.1, 100 * Math.PI, .1).map(function(t) {

							var r = t;
	  						return [t, r/10];
						});

			},
			states : {
				'default' : [1,1,1,1,1,1]
			}
		},
				};
